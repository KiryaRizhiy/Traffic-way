using System.Collections;
using System.Collections.Generic;
using System.IO;
using System;
using UnityEngine;
using GameAnalyticsSDK;
using UnityEngine.SceneManagement;
//using UnityEngine.Advertisements;
//using GoogleMobileAds.Api;

public static class Engine
{
    //UNCOMMENT TO IMPLEMENT UNITY ADS
    //public static bool isVideoReady
    //{
    //    get
    //    {
    //        return Advertisement.IsReady(PlacementType.video.ToString());
    //    }
    //}
    //public static bool isRewardedVideoReady
    //{
    //    get
    //    {
    //        return Advertisement.IsReady(PlacementType.rewardedVideo.ToString());
    //    }
    //}
    //public static bool isBannerReady
    //{
    //    get
    //    {
    //        return Advertisement.IsReady(PlacementType.banner.ToString());
    //    }
    //}
    public static int actualLevel
    { get { return meta.passedLevels + 1; } }
    public static GameSessionState sessionState
    { get { return currentSession.state; } }
    public static bool paused
    {
        get
        {
            if (currentSession != null) 
                return currentSession.paused; 
            else
                return true;
        }
    }
    public static int rewardAmount
    {
        get
        {
            return currentSession.rewardAmount;
        }
    }
    internal static GameData meta;
    private static int totalHandcraftLevelsAmount
    {
        get
        {
            return SceneManager.sceneCountInBuildSettings - 2;
        }
    }
    private static LevelPlayingSession currentSession;
    private static List<String> CoinMakersSettingsProfitRates;
    private static List<String> CoinMakersSettingsUpgradePrices;
    private static List<Texture2D> CoinMakersTextures;

    public static void Initialize()
    {
        Load();
        Subscribe();
        NPCCarDriver.LoadResources();
        CarShooter.LoadResources();
        TrafficLight.LoadResources();
        LevelGenerator.LoadResources();
    }
    public static void InitializeTest()
    {
        if (currentSession == null)
            Initialize();
    }

    public static void ClearSaveFile()
    {
        File.Delete(Settings.saveFile);
        meta = new GameData();
        RestartLevel();
    }
    public static void Play()
    {
        if (actualLevel <= totalHandcraftLevelsAmount)
            SceneManager.LoadScene(actualLevel + 1);//Load handlecraft level
        else
            if (meta.lastHandcraftPassedLevel < totalHandcraftLevelsAmount)
                SceneManager.LoadScene(meta.lastHandcraftPassedLevel + 1);//Load not played handcraft level
            else
                SceneManager.LoadScene(1);//Load autogenerated level
    }
    public static void LevelDone()
    {
        SwitchLevel();
        Save();
    }
    //public static void LevelFailed()
    //{
    //    if (isVideoReady)
    //        Advertisement.Show(PlacementType.video.ToString());
    //    else
    //        RestartLevel();
    //}
    public static void RestartLevel()
    {
        Save();
        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);
    }
    public static void Quit()
    {
        if (currentSession.state == GameSessionState.Won || currentSession.state == GameSessionState.Passed)
            Save();
        Application.Quit();
    }
    public static void SwitchPause()
    {
        if (currentSession.state != GameSessionState.Lost && currentSession.state != GameSessionState.Won)
            currentSession.paused = !currentSession.paused;
    }
    public static void ShowRewardedVideo()
    {
        if (currentSession.adController.isRewardedVideoReady)
            currentSession.adController.ShowRewardedAd();
        else
            Engine.Events.AdNotReady(PlacementType.rewardedVideo);
    }

    internal static void AddCoins(int count)
    {
        meta.coinsCount += count;
    }
    internal static void SwitchLevel()
    {
        AddCoins(currentSession.rewardAmount);
        int nextLevelBuildIndex;
        if (meta.lastHandcraftPassedLevel < totalHandcraftLevelsAmount)
            nextLevelBuildIndex = meta.lastHandcraftPassedLevel + 2;
        else
            nextLevelBuildIndex = SceneManager.GetActiveScene().buildIndex + 1;
        if (meta.passedLevels < totalHandcraftLevelsAmount && !(SceneManager.GetActiveScene().buildIndex == 1))
            SceneManager.LoadScene(nextLevelBuildIndex);//Load handlecraft level
        else
            SceneManager.LoadScene(1);//Load autogenerated level
    }
    internal static Texture2D GetCoinMakerTexture(GarageCoinMakerType type, int level)
    {
        foreach (GarageCoinMakerType _t in Enum.GetValues(typeof(GarageCoinMakerType)))
        {
            int typeShift = 0;
            if (_t != type)
                typeShift += Directory.GetFiles("Assets/Resources/TrafficWay/Textures/Garage/" + _t.ToString() + "/").Length;
            else
                return CoinMakersTextures[typeShift + level];
        }
        return null;
    }
    private static void Save()
    {
        string jsonData = JsonUtility.ToJson(meta);
        File.WriteAllText(Settings.saveFile, jsonData);
        Debug.Log(jsonData);
    }
    private static void Load()
    {
        if (!Directory.Exists(Settings.savePath))
        {//Create directory if not exists
            Directory.CreateDirectory(Settings.savePath);
            Debug.Log("Saving path created " + Settings.savePath);
        }
        if (File.Exists(Settings.saveFile))
        {//load from file
            FileStream file = File.OpenRead(Settings.saveFile);
            StreamReader read = new StreamReader(file);
            string jsonData = read.ReadToEnd();
            Debug.Log("Data loaded from " + Settings.saveFile);
            int saveFileVersion = 0;
            if (jsonData.IndexOf("_version") > 0)
                saveFileVersion = Int32.Parse(jsonData.Substring(jsonData.IndexOf("_version") + 10, 1));
            else
            {
                Debug.LogError("Save file has no version");
                GameAnalytics.NewErrorEvent(GAErrorSeverity.Critical, "Save file has no version");
                meta = new GameData();
            }
            if (saveFileVersion == GameData.Version)
            {
                meta = JsonUtility.FromJson<GameData>(jsonData);
                read.Close();
                file.Close();
            }
            else
            {
                Debug.LogError("Save file has an old verson " + saveFileVersion);
                GameAnalytics.NewErrorEvent(GAErrorSeverity.Critical, "Save file has an old verson " + saveFileVersion);
                meta = new GameData();
            }
        }
        else
        {//load new game
            meta = new GameData();
        }

        //Loading resources
        CoinMakersSettingsProfitRates = new List<string>();
        FileStream _f = File.OpenRead("Assets/Resources/TrafficWay/Other/CoinMakersSettingsProfitRates.csv");
        StreamReader _r = new StreamReader(_f);
        while (!_r.EndOfStream)
        {
            CoinMakersSettingsProfitRates.Add(_r.ReadLine());
        }
        _f.Close();
        _r.Close();
        CoinMakersSettingsUpgradePrices = new List<string>();
        _f = File.OpenRead("Assets/Resources/TrafficWay/Other/CoinMakersSettingsUpgradePrices.csv");
        _r = new StreamReader(_f);
        while (!_r.EndOfStream)
        {
            CoinMakersSettingsUpgradePrices.Add(_r.ReadLine());
        }
        _f.Close();
        _r.Close();
        CoinMakersTextures = new List<Texture2D>();
        foreach (GarageCoinMakerType _t in Enum.GetValues(typeof(GarageCoinMakerType)))
        {
            CoinMakersTextures.AddRange(Resources.LoadAll<Texture2D>("TrafficWay/Textures/Garage/"+_t.ToString()+"/"));
            Debug.Log("Loaded textures of " + _t.ToString());
        }

    }
    private static void Subscribe()
    {
        Events.extraRewardReceived += Save;
        Events.finishLineReached += HandleFinishLineCrossed;
        Events.crashHappened += HandleChashHappened;
        Events.adFinished += OnAdFinished;
        SceneManager.activeSceneChanged += OnLevelChanged;
    }

    private static void OnLevelChanged(Scene current, Scene next)
    {
        //UNCOMMENT TO IMPLEMENT UNITY ADS
        //Advertisement.Load(PlacementType.video.ToString());
        //Advertisement.Load(PlacementType.rewardedVideo.ToString());
        //Advertisement.Load(PlacementType.banner.ToString());
        Debug.Log("Scene change detected. Current active scene is " + next.name);
        if (currentSession != null)//if current scene is not initial
            currentSession.Close(); //Closing previous session only if it existed
        //else
        //{
        //    Advertisement.Banner.SetPosition(BannerPosition.BOTTOM_CENTER);
        //    //Loading ads if we just started playing
        //}
        currentSession = new LevelPlayingSession(next);
        Logger.UpdateContent(UILogDataType.Level, next.name + ". Passed " + meta.passedLevels + " levels. Last passed handlecraft level: " + meta.lastHandcraftPassedLevel);
    }
    private static void HandleFinishLineCrossed()
    {
        currentSession.state = GameSessionState.Won;
        currentSession.paused = true;
        if (currentSession.adController.isRegularVideoReady)
            currentSession.adController.ShowRegularAd();
        else
            Engine.Events.AdNotReady(PlacementType.interstitial);
    }
    private static void HandleChashHappened()
    {
        currentSession.state = GameSessionState.Lost;
        //currentSession.paused = true;
        if (currentSession.adController.isRegularVideoReady)
            currentSession.adController.ShowRegularAd();
        else
            Engine.Events.AdNotReady(PlacementType.interstitial);
    }
    private static void OnAdFinished(PlacementType type)
    {
        if (type == PlacementType.rewardedVideo)
        {
            currentSession.ExtraRewardRequired = true;
            Events.ExtraRewardReceived();
        }
    }

    private class LevelPlayingSession/*: IUnityAdsListener UNCOMMENT TO IMPLEMENT UNITY ADS*/
    {
        public Scene level 
        { get; private set; }
        public GameSessionState state
        {
            get
            {
                return _state;
            }
            set
            {
                _state = value;
                Debug.Log("State changed");
                if (value == GameSessionState.Passed || value == GameSessionState.Won)
                {
                    meta.passedLevels += 1;
                    if (level.buildIndex != 1)
                        meta.lastHandcraftPassedLevel += 1;
                }
                Engine.Events.GameSessionStateChanged(_state);
            }
        }
        public AdMobController adController
        { get; private set; }
        public int rewardAmount
        {
            get
            {
                if (ExtraRewardRequired)
                    return Settings.levelReward * Settings.extraRewardMultiplyer;
                else
                    return Settings.levelReward;
            }
        }
        public bool ExtraRewardRequired;
        public bool paused
        {
            get
            { 
                return _paused; 
            }
            set
            {
                if (value == _paused)
                    return;
                if (!_paused)
                {
                    _paused = value;
                    Engine.Events.Paused();
                }
                else
                {
                    _paused = value;
                    Engine.Events.Unpaused();
                }
            }
        }
        public bool bossFight
        {
            get;
            private set;
        }

        private bool _paused;
        private GameSessionState _state;

        public LevelPlayingSession(Scene lvl)
        {
            level = lvl;
            state = GameSessionState.InProgress;
            paused = false;
            adController = new GameObject().AddComponent<AdMobController>();
            adController.gameObject.name = "AdMobController";
            ////Advertisement.AddListener(this); UNCOMMENT TO IMPLEMENT UNITY ADS
        }        
        public void Close()
        {
            //Advertisement.RemoveListener(this); UNCOMMENT TO IMPLEMENT UNITY ADS
        }

        //UNCOMMENT TO IMPLEMENT UNITY ADS
        //public void OnUnityAdsReady(string placementId)
        //{
        //    if (placementId == PlacementType.banner.ToString())
        //        Advertisement.Banner.Show(PlacementType.banner.ToString());
        //    Debug.Log(placementId + " ready");
        //}
        //public void OnUnityAdsDidError(string message)
        //{
        //    GameAnalytics.NewErrorEvent(GAErrorSeverity.Error, message);
        //}
        //public void OnUnityAdsDidFinish(string placementId, ShowResult showResult)
        //{
        //    Logger.UpdateContent(UILogDataType.Monetization, placementId + " " + showResult, true, true);
        //    if (placementId == PlacementType.rewardedVideo.ToString())
        //        if (showResult == ShowResult.Finished)
        //        {
        //            ExtraRewardReceoved = true;
        //            Events.ExtraRewardReceived();
        //        }
        //    if (placementId == PlacementType.video.ToString())
        //    {
        //        if (state == GameSessionState.Won)
        //            SwitchLevel();
        //        if (state == GameSessionState.Lost)
        //            RestartLevel();
        //    }
        //}
        //public void OnUnityAdsDidStart(string placementId)
        //{
        //}
    }

    #region Metadata models versions
    internal class GameData
    {
        public const int Version = 2;
        [SerializeField]
        private int _version;
        public int passedLevels;
        public int lastHandcraftPassedLevel;
        public int coinsCount;
        [SerializeField]
        public GarageData Garage;
        public GameData()
        {
            _version = Version;
            Garage = new GarageData();
        }

        [Serializable]
        public class GarageData
        {
            [SerializeField]
            private List<CoinMakerData> CoinMakers;
            public GarageData()
            {
                CoinMakers = new List<CoinMakerData>();
                foreach (GarageCoinMakerType _t in Enum.GetValues(typeof(GarageCoinMakerType)))
                {
                    CoinMakers.Add(new CoinMakerData(_t));
                }
            }
            public CoinMakerData GetCoinMaker(GarageCoinMakerType Type)
            {
                return CoinMakers.Find(x=>x.type == Type);
            }
            public void UpgradeCoinMaker(GarageCoinMakerType Type)
            {
                if (meta.coinsCount < GetCoinMaker(Type).updatePrice)
                {
                    Debug.LogError("Invalid purchase attempt. Trying to purchase update for " + Type.ToString() + ". It's cost is " + GetCoinMaker(Type).updatePrice + " coins, but there is only " + meta.coinsCount + " coins");
                    return;
                }
                meta.coinsCount = meta.coinsCount - GetCoinMaker(Type).updatePrice;
                GetCoinMaker(Type).level = GetCoinMaker(Type).level + 1;
                GetCoinMaker(Type).lastCoinCollect = DateTime.UtcNow.Ticks;
                Save();
                Engine.Events.GarageStateChanged(Type);
            }
            public void CollectProfit(GarageCoinMakerType Type)
            {
                Engine.AddCoins(GetCoinMaker(Type).currentProfit);
                GetCoinMaker(Type).lastCoinCollect = DateTime.UtcNow.Ticks;
                Save();
                Engine.Events.GarageStateChanged(Type);
            }
        }
        [Serializable]
        public class CoinMakerData
        {
            public GarageCoinMakerType type;
            public int level;
            public long lastCoinCollect;
            public Texture2D currentTexture
            {
                get
                {
                    return Engine.GetCoinMakerTexture(type, level);
                }
            }
            public bool updatable
            {
                get
                {
                    return level < Directory.GetFiles("Assets/Resources/TrafficWay/Textures/Garage/" + type.ToString() + "/").Length;
                }
            }
            public Texture2D futureTexture
            {
                get
                {
                    if (updatable)
                        return Engine.GetCoinMakerTexture(type, level + 1);
                    else
                        return null;
                }
            }
            public int updatePrice
            {
                get
                {
                    int rowNum = Array.IndexOf(CoinMakersSettingsUpgradePrices[0].Split(','), type.ToString());
                    int price = Int32.Parse(CoinMakersSettingsUpgradePrices[level + 1].Split(',')[rowNum]);
                    return price;
                }
            }
            public int profitRate
            {
                get
                {
                    int rowNum = Array.IndexOf(CoinMakersSettingsProfitRates[0].Split(','), type.ToString());
                    int profit = Int32.Parse(CoinMakersSettingsProfitRates[level + 1].Split(',')[rowNum]);
                    return profit;
                }
            }
            public int currentProfit
            {
                get
                {
                    TimeSpan t = DateTime.UtcNow - new DateTime(lastCoinCollect);
                    //Debug.Log("Last coin collect is " + new DateTime(lastCoinCollect).ToString() + " now " + DateTime.UtcNow + ". Difference in minutes - " + t.TotalMinutes);
                    int ticks = Convert.ToInt32((Math.Floor(t.TotalMinutes / Settings.coinMakerTickMinutes)));
                    if (ticks > Settings.paidTicksLimit)
                        ticks = Settings.paidTicksLimit;
                    return ticks*profitRate;
                }
            }
            public CoinMakerData(GarageCoinMakerType Type)
            {
                type = Type;
                level = 0;
                lastCoinCollect = DateTime.UtcNow.Ticks;
            }
        }
    }
    internal class GameData_v1
    {
        public const int Version = 1;
        [SerializeField]
        private int _version;
        public int passedLevels;
        public int lastHandcraftPassedLevel;
        public int coinsCount;
        public GameData_v1()
        {
            _version = Version;
        }
    }
    internal class GameData_v0
    {
        public int passedLevels;
        public int lastHandcraftPassedLevel;
        public int coinsCount;
    }

    #endregion

    public static class Events
    {
        public delegate void GameStateHandler(GameSessionState state);
        public delegate void Fact();
        public delegate void AdsInfo(PlacementType type);
        public delegate void ZoneReach(GameObject zone);
        public delegate void GarageStateChange(GarageCoinMakerType type);

        public static event Fact finishLineReached;
        public static event Fact crashHappened;
        public static event Fact extraRewardReceived;
        public static event Fact initialized;
        public static event Fact paused;
        public static event Fact unpaused;
        public static event ZoneReach zoneReached;
        public static event ZoneReach zoneLeft;
        public static event AdsInfo adLoaded;
        public static event AdsInfo adNotReady;
        public static event AdsInfo adFinished;
        public static event AdsInfo adSkipped;
        public static event AdsInfo adFailed;
        public static event AdsInfo adOpened;
        public static event AdsInfo adUserLeave;
        public static event GameStateHandler gameSessionStateChanged;
        public static event GarageStateChange onGarageStateChanged;

        public static void GameSessionStateChanged(GameSessionState state)
        {
            Debug.Log("Game session state change detected. New state: " + state.ToString());
            if (gameSessionStateChanged != null)
                gameSessionStateChanged(state);
        }
        public static void FinishLineReached()
        {
            Debug.Log("Finish line reached");
            if (finishLineReached != null)
                finishLineReached();
        }
        public static void ExtraRewardReceived()
        {
            Debug.Log("Extra reward received");
            if (extraRewardReceived != null)
                extraRewardReceived();
        }
        public static void CrashHappened()
        {
            Debug.Log("Crush happened");
            if (crashHappened != null)
                crashHappened();
        }
        public static void Initialized()
        {
            Debug.Log("Game engine initialized");
            if (initialized != null)
                initialized();
        }
        public static void Paused()
        {
            Debug.Log("Paused");
            if (paused != null)
                paused();
        }
        public static void Unpaused()
        {
            Debug.Log("Unpaused");
            if (unpaused != null)
                unpaused();
        }
        public static void ZoneReached(GameObject zone)
        {
            Debug.Log(zone.name + " reached");
            if (zoneReached != null)
                zoneReached(zone);
        }
        public static void ZoneLeft(GameObject zone)
        {
            Debug.Log(zone.name + " left");
            if (zoneLeft != null)
                zoneLeft(zone);
        }
        public static void AdLoaded(PlacementType type)
        {
            Debug.Log(type + " placement loaded");
            if (adLoaded != null)
                adLoaded(type);
        }
        public static void AdNotReady(PlacementType type)
        {
            Debug.Log("Time to use " + type + " placement, but it is not ready");
            if (adNotReady != null)
                adNotReady(type);
        }
        public static void AdFinished(PlacementType type)
        {
            Debug.Log(type + " placement finished");
            if (adFinished != null)
                adFinished(type);
        }
        public static void AdSkipped(PlacementType type)
        {
            Debug.Log(type + " placement skipped");
            if (adSkipped != null)
                adSkipped(type);
        }
        public static void AdFailed(PlacementType type)
        {
            Debug.LogError(type + " placement failed");
            if (adFailed != null)
                adFailed(type);
        }
        public static void AdOpened(PlacementType type)
        {
            Debug.Log(type + " placement clicked");
            if (adOpened != null)
                adOpened(type);
        }
        public static void AdUserLeave(PlacementType type)
        {
            Debug.Log("User left, wathing advertisment " + type);
            if (adUserLeave != null)
                adUserLeave(type);
        }
        public static void GarageStateChanged(GarageCoinMakerType type)
        {
            Debug.Log("Coin maker " + type + " upgraded");
            if (onGarageStateChanged != null)
                onGarageStateChanged(type);
        }
    }
}
public enum GameSessionState { InProgress,Passed, Won, Lost }
public enum GarageCoinMakerType { MaterialsPedestal, MaterialsShelf, ToolsWall, Workbench }