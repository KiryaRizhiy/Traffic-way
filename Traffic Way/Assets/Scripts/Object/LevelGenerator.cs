using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class LevelGenerator : MonoBehaviour
{
    private static GameObject[] Crosses;
    private static GameObject[] Situations;
    private static GameObject[] Bosses;
    private static GameObject FinishBlock;
    private static GameObject FourCoins;


    public static void LoadResources()
    {
        Crosses = Resources.LoadAll<GameObject>("TrafficWay/Prefabs/Blocks/Crosses");
        Situations = Resources.LoadAll<GameObject>("TrafficWay/Prefabs/Blocks/Situations");
        Bosses = Resources.LoadAll<GameObject>("TrafficWay/Prefabs/Blocks/Bosses");
        FinishBlock = Resources.Load<GameObject>("TrafficWay/Prefabs/Blocks/Special/FinishRoad");
        FourCoins = Resources.Load<GameObject>("TrafficWay/Prefabs/Blocks/Special/FourCoins");
        Debug.Log("Level blocks loaded. Crosses - " + Crosses.Length + ", Situations - " + Situations.Length + ", Bosses - " + Bosses.Length + ". Also " + FinishBlock.name + " and " + FourCoins.name + " are loaded");
    }

    private List<GameObject> BlockSequence;
    private bool isBossFignt;
    private int lvlType;//Тип уровня по ТЗ https://docs.google.com/document/d/1Ue8eE5f6vBpleKTDr1nAHemjJJID7ihFEmhkrulEXqg/edit#heading=h.tbt6rb2j9cnk

    // Start is called before the first frame update
    void Start()
    {
        isBossFignt = false;
        lvlType = Engine.actualLevel % 10;
        Debug.Log("Generator start. Level type - " + lvlType);
        Generate();
    }

    private void Generate()
    {
        //Create sequence
        BlockSequence = new List<GameObject>();
        Logger.AddContent(UILogDataType.Level, "Autogenerated level type " + lvlType);
        switch (lvlType)
        {
            case 1:
                if (Random.Range(0, 99) <= 49)
                    BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                else
                    BlockSequence.Add(Situations[Random.Range(0, Situations.Length)]);
                BlockSequence.Add(FourCoins);                
                break;
            case 2:
                BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                BlockSequence.Add(Situations[Random.Range(0, Situations.Length)]);
                BlockSequence.Add(FourCoins);
                break;
            case 3:
                BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                BlockSequence.Add(Situations[Random.Range(0, Situations.Length)]);
                BlockSequence.Add(FourCoins);
                BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                break;
            case 4:
                BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                BlockSequence.Add(Situations[Random.Range(0, Situations.Length)]);
                BlockSequence.Add(FourCoins);
                BlockSequence.Add(Bosses[Random.Range(0, Bosses.Length)]);
                isBossFignt = true;
                break;
            case 5:
                if (Random.Range(0, 99) <= 49)
                {
                    BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                    BlockSequence.Add(FourCoins);
                    BlockSequence.Add(Situations[Random.Range(0, Situations.Length)]);
                }
                else
                {
                    BlockSequence.Add(FourCoins);
                    BlockSequence.Add(FourCoins);
                    BlockSequence.Add(FourCoins);
                }
                break;
            case 6:
                BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                BlockSequence.Add(FourCoins);
                BlockSequence.Add(Bosses[Random.Range(0, Bosses.Length)]);
                isBossFignt = true;
                break;
            case 7:
                BlockSequence.Add(Situations[Random.Range(0, Situations.Length)]);
                BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                BlockSequence.Add(FourCoins);
                BlockSequence.Add(Situations[Random.Range(0, Situations.Length)]);
                break;
            case 8:
                BlockSequence.Add(Situations[Random.Range(0, Situations.Length)]);
                BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                BlockSequence.Add(FourCoins);
                BlockSequence.Add(Bosses[Random.Range(0, Bosses.Length)]);
                isBossFignt = true;
                break;
            case 9:
                BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                BlockSequence.Add(Situations[Random.Range(0, Situations.Length)]);
                BlockSequence.Add(FourCoins);
                BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                BlockSequence.Add(Situations[Random.Range(0, Situations.Length)]);
                BlockSequence.Add(FourCoins);
                break;
            case 0:
                BlockSequence.Add(FourCoins);
                BlockSequence.Add(FourCoins);
                BlockSequence.Add(FourCoins);
                break;
            default:
                Debug.LogError("Unknown lvl type " + lvlType);
                BlockSequence.Add(Crosses[Random.Range(0, Crosses.Length)]);
                BlockSequence.Add(Situations[Random.Range(0, Situations.Length)]);
                BlockSequence.Add(Bosses[Random.Range(0, Bosses.Length)]);
                isBossFignt = true;
                BlockSequence.Add(FourCoins);
                break;
        }
        BlockSequence.Add(FinishBlock);


        //Build sequence
        int lvlLength = 0;
        foreach (GameObject _b in BlockSequence)
        {
            GameObject _currB = Instantiate(_b, transform);
            _currB.transform.position = new Vector3(0f, lvlLength, 0f);
            _currB.name = _b.name;
            lvlLength += _b.GetComponent<Block>().length;
        }

        //If boss fight
        if (isBossFignt)
            CarDriver.CurrentCar.GetComponent<CarShooter>().enabled = true;
    }
}
